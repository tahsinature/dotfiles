" File              : vimrc
" Date              : 17.12.2019
" Last Modified Date: 17.12.2019
" File              : vimrc
" Date              : 17.12.2019
" Last Modified Date: 17.12.2019
"let s:init_d = expand("~/.vim/init.d")
"if !isdirectory(s:init_d)
"	let s:init_d = expand("~/.dotfiles/.vim/init.d")
"endif
"if !isdirectory(s:init_d) | finish | endif
"
"for f in split(glob(s:init_d . "/*.vim"))
"	exe 'source' . f
"endfor

let g:init = {}
let g:init.directories = [
         \expand("~/.vim/init.d"),
\]

function g:init.resolve_directory()
   for l:directory in self.directories
      if isdirectory(l:directory)
         return l:directory
    endif
 endfor
 return ""
endfunction

function g:init.load_files(...)
   let l:dir = get(a:, "1", self.resolve_directory())
   if l:dir == ""
      echohl ErrorMsg
      echo "[vimrc] Cannot sources all init file"
      echohl NONE
   endif
   let l:pattern = get(a:, "2", "/*.vim")
   for l:file in split(glob(l:dir . l:pattern))
      if filereadable(expand(l:file))
         exe 'source' . l:file
      endif
   endfor
endfunction

function! g:init.plug_exists(name)
   let l:plugs = get(g:, "plugs", {})
   if type(l:plugs) != type({}) || len(l:plugs) == 0
      return match(&rtp, a:name) != -1 ? 1 : 0
   endif
   if !has_key(l:plugs, a:name)
      return 0
   endif
   let l:directory = '/' . trim(l:plugs[a:name].dir, '/')
   return isdirectory(l:directory) && index(split(&runtimepath, ','), l:directory) >= 0
endfunction

call g:init.load_files()
